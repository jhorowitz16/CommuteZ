{"version":3,"sources":["components/Clock.jsx","components/Dashboard.jsx","App.js","serviceWorker.js","index.js"],"names":["Clock","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","time","Date","toLocaleString","_this2","intervalID","setInterval","tick","clearInterval","rawTime","setState","formattedTime","formatTime","toLocaleTimeString","navigator","language","hour","minute","react_default","a","createElement","className","Component","NAMES","Dashboard","ReactGA","initialize","prevClick","nextState","idx","self","sendGA","console","log","eventCategory","eventAction","eventLabel","event","category","action","label","map","onClick","App","components_Clock","components_Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"4SAyDeA,qBA/Cb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAM,IAAIC,MAAOC,kBAHFV,mFAOC,IAAAW,EAAAR,KAClBA,KAAKS,WAAaC,YAChB,kBAAMF,EAAKG,QACX,oDAKFC,cAAcZ,KAAKS,2CAInB,IAAMI,GAAU,IAAIP,MAAOC,iBAE3BP,KAAKc,SAAS,CACZT,KAAMQ,EACNE,cAHWf,KAGSgB,YAAW,IAAIV,MAAOC,uDAInCF,GAMT,OALa,IAAIC,KAAKD,GACLY,mBAAmBC,UAAUC,SAAU,CACtDC,KAAM,UACNC,OAAO,6CAOT,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,IAA+BzB,KAAKI,MAAMW,cAA1C,KACAO,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAd,IAAkCzB,KAAKI,MAAMC,KAA7C,aA/CYqB,6BCEdC,EAAQ,CACZ,eACA,iBACA,iBACA,WAyDaC,cApDb,SAAAA,EAAYhC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4B,GACjB/B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8B,GAAAzB,KAAAH,KAAMJ,IACNiC,IAAQC,WAAW,kBACnBjC,EAAKO,MAAQ,CACX2B,UAAW,MAJIlC,qFAQGmC,GACpB,OAAOhC,KAAKI,MAAM2B,YAAcC,EAAUD,sCAGxCE,GACF,IAAMC,EAAOlC,KACb,OAAO,WACLkC,EAAKC,OAAO,UAAWR,EAAMM,IAAM,IAAI3B,MAAOC,kBAC9C6B,QAAQC,IAAIJ,GACZG,QAAQC,IAAIV,EAAMM,IAClBC,EAAKpB,SAAS,CACZiB,UAAWJ,EAAMM,qCAKhBK,EAAeC,EAAaC,GAEjCJ,QAAQC,IAAIC,EAAgB,IAAMC,EAAc,IAAMC,GACtDX,IAAQY,MAAM,CACZC,SAAUJ,EACVK,OAAQJ,EACRK,MAAOJ,qCAKT,IAAMN,EAAOlC,KACb,OACEsB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACZ,CAAC,EAAG,EAAG,EAAG,GAAGoB,IAAI,SAASZ,GACzB,OAAOX,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,UAAQsB,QAASZ,EAAKG,IAAIJ,IAAMX,EAAAC,EAAAC,cAAA,YAAOG,EAAMM,SAI7DX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXzB,KAAKI,MAAM2B,mBA/CCL,aCYTqB,MApBf,WACE,OACEzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAACwB,EAAD,MACA1B,EAAAC,EAAAC,cAACyB,EAAD,SCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBzC,WACrBA,UAAU0C,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3b54cbca.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport '../css/clock.css';\n\nclass Clock extends Component {\n\n  static propTypes = {\n    time: PropTypes.string\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: new Date().toLocaleString()\n    };\n  }\n\n  componentDidMount() {\n    this.intervalID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  tick() {\n    const rawTime = new Date().toLocaleString();\n    const self = this;\n    this.setState({\n      time: rawTime,\n      formattedTime: self.formatTime(new Date().toLocaleString()),\n    });\n  }\n\n  formatTime(time) {\n    const date = new Date(time);\n    const sol = date.toLocaleTimeString(navigator.language, {\n      hour: '2-digit',\n      minute:'2-digit',\n    });\n    return sol;\n\n  }\n\n  render() {\n    return (\n      <div className='clock'>\n        <h1 className='clock__text'> { this.state.formattedTime } </h1>\n        <h5 className='clock__rawtext'> { this.state.time} </h5>\n      </div>\n    );\n  }\n}\n\nexport default Clock;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport '../css/dashboard.css';\nimport ReactGA from 'react-ga';\n\n\nconst NAMES = [\n  \"Leaving Home\",\n  \"At MV Caltrain\",\n  \"At SF Caltrain\",\n  \"At Work\",\n];\n\nclass Dashboard extends Component {\n\n  constructor(props) {\n    super(props);\n    ReactGA.initialize('UA-128940867-3');\n    this.state = {\n      prevClick: null\n    };\n  }\n\n  shouldComponentUpdate(nextState) {\n    return this.state.prevClick !== nextState.prevClick;\n  }\n\n  log(idx) {\n    const self = this;\n    return function() {\n      self.sendGA(\"logTrip\", NAMES[idx], new Date().toLocaleString());\n      console.log(idx);\n      console.log(NAMES[idx]);\n      self.setState({\n        prevClick: NAMES[idx]\n      });\n    }\n  }\n\n  sendGA(eventCategory, eventAction, eventLabel) {\n    debugger;\n    console.log(eventCategory + \" \" + eventAction + \" \" + eventLabel);\n    ReactGA.event({\n      category: eventCategory,\n      action: eventAction,\n      label: eventLabel\n    });\n  }\n\n  render() {\n    const self = this;\n    return (\n      <div className='dashboard'>\n        <div className='dashboard__buttons'>\n          {[0, 1, 2, 3].map(function(idx){\n            return <div><button onClick={self.log(idx)}><span>{NAMES[idx]}</span></button></div>\n          })}\n        </div>\n\n        <div className='dashboard__action'>\n          { this.state.prevClick}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport './App.css';\nimport Clock from './components/Clock';\nimport Dashboard from './components/Dashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Clock/>\n        <Dashboard/>\n      </header>\n    </div>\n  );\n}\n\nfunction getCurrentTime() {\n  const currentdate = new Date();\n  return \"\" + currentdate.getDay() + \"/\"+currentdate.getMonth()\n    + \"/\" + currentdate.getFullYear() + \" @ \"\n    + currentdate.getHours() + \":\"\n    + currentdate.getMinutes() + \":\" + currentdate.getSeconds();\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}